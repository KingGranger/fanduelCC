{"version":3,"sources":["artistBlock/relatedArtistBlock/relatedArtistBlock.js","artistBlock/topTenBlock/topTenBlock.js","artistBlock/artistBlock.js","App.js","serviceWorker.js","index.js"],"names":["RelatedArtistBlock","props","relatedArtistData","changeArtist","errorMessage","relatedArtistList","Object","keys","length","includes","artists","Segment","textAlign","Header","List","horizontal","map","artist","Item","key","id","onClick","e","name","Image","src","images","url","TopTen","topTenData","topTenList","tracks","ordered","song","track","uri","split","width","height","frameBorder","allowtransparency","allow","ArtistBlock","artistData","Container","Grid","celled","Row","Column","as","centered","followers","total","Button","color","icon","href","external_urls","spotify","Icon","tokenHash","window","location","hash","substring","reduce","initial","item","parts","decodeURIComponent","App","state","artistId","callSpotify","token","access_token","headers","fetch","then","res","json","setState","this","prevProps","prevState","className","error","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fc1d746.chunk.js","sourcesContent":["import React from \"react\";\nimport { Segment, List, Image, Header } from 'semantic-ui-react';\n\nconst RelatedArtistBlock = (props) => {\n  const {relatedArtistData, changeArtist} = props\n  const errorMessage = ['Sorry no related Artists']\n  const relatedArtistList = () => {\n    return Object.keys(relatedArtistData).length !== 0 && !Object.keys(relatedArtistData).includes('error') ? relatedArtistData.artists : errorMessage\n  }\n  return(\n    <Segment textAlign='center'>\n      <Header>Related Artists</Header>\n      {relatedArtistList() !== errorMessage ? \"Click on Artist for more information\" : null}\n      <List horizontal>\n        {(relatedArtistList()[\"0\"] && relatedArtistList() !== errorMessage) ? relatedArtistList().map(artist => {\n          return (<List.Item key={artist.id} onClick={(e)=>changeArtist(e, artist.id)}>\n            {artist.name}\n            <br/>\n            <Image src={artist.images.length !== 0 ? artist.images[artist.images.length -1].url : \"\"}/>\n          </List.Item>)\n        }) :\n        <List.Item>{errorMessage[0]}</List.Item>\n      }\n      </List>\n    </Segment>\n  )\n\n}\n\nexport default RelatedArtistBlock\n","import React from \"react\";\nimport { List, Header, Segment } from 'semantic-ui-react';\n\n\nconst TopTen = (props) => {\n  const {topTenData} = props\n  const errorMessage = ['Sorry no Top Ten tracks']\n  const topTenList = () => {\n    return Object.keys(topTenData).length !== 0 && !Object.keys(topTenData).includes('error') ? topTenData.tracks : errorMessage\n  }\n  const parseSong = (uri) => {\n    return uri.split(':')\n  }\n\n  return (\n    <Segment>\n      <Header>Top Ten List</Header>\n      <List ordered>\n        {topTenList() !== errorMessage && topTenList().length > 0 ? topTenList().map(song => {\n          let track = parseSong(song.uri)\n          return (<List.Item key={song.id}>\n            {song.name}\n            <br/>\n            <iframe src={`https://open.spotify.com/embed/${track[1]}/${track[2]}`} width=\"100%\" height=\"100px\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n          </List.Item>\n          )\n        }): null}\n      </List>\n    </Segment>\n  )\n}\n\nexport default TopTen\n","import React from \"react\";\nimport { Container, Header, Image, Button, Icon, Grid } from 'semantic-ui-react';\nimport RelatedArtistBlock from './relatedArtistBlock/relatedArtistBlock';\nimport TopTen from './topTenBlock/topTenBlock';\n\nconst ArtistBlock = (props) => {\n  const {artistData, relatedArtistData, changeArtist, topTenData} = props\n  const artistImage = () => Object.keys(artistData).length !== 0 && !Object.keys(artistData).includes('error') && artistData.images !== 0 ? artistData.images[1].url : \"\"\n  const artistFollowers = () => Object.keys(artistData).length !== 0 && !Object.keys(artistData).includes('error') ? artistData.followers.total : \"\"\n  const artistPage = () => Object.keys(artistData).length !== 0 && !Object.keys(artistData).includes('error') ? artistData.external_urls.spotify : \"\"\n\n  return (\n    <Container textAlign='center'>\n      <Grid celled>\n        <Grid.Row>\n          <Grid.Column width={12}>\n            <Header as='h1'>{artistData.name}</Header>\n            <Image src={artistImage()} centered/>\n            <h2>{artistData.name} has {artistFollowers()} followers</h2>\n            <Button color='green' icon><a href={artistPage()}><Icon name='spotify'></Icon>Artist Page</a></Button>\n          </Grid.Column>\n          <Grid.Column width={4}>\n            <TopTen topTenData={topTenData}/>\n          </Grid.Column>\n        </Grid.Row>\n\n        <RelatedArtistBlock relatedArtistData={relatedArtistData} changeArtist={changeArtist}/>\n      </Grid>\n    </Container>\n  )\n}\n\nexport default ArtistBlock\n","import React, { Component } from \"react\";\nimport ArtistBlock from './artistBlock/artistBlock';\nimport './App.css';\n\nconst clientId = 'b238b8d38645462ab2ae05598e54bdfb';\nconst redirectUri = \"http://poor-sun.surge.sh\";\n\nconst tokenHash = window.location.hash.substring(1)\n                  .split(\"&\")\n                  .reduce((initial, item) => {\n                    if (item) {\n                      var parts = item.split(\"=\");\n                      initial[parts[0]] = decodeURIComponent(parts[1]);\n                    }\n                    return initial;\n                  }, {})\n\nclass App extends Component {\n  state = {\n    artistId: '4dpARuHxo51G3z768sgnrY',\n    artistData: {},\n    relatedArtistData: {},\n    topTenData: {},\n  }\n\n  callSpotify = (artistId) => {\n    let token = tokenHash.access_token\n    if (token) {\n      let headers = {\n            headers: {\n              'Authorization': 'Bearer ' + token\n            }\n          }\n\n      fetch(`https://api.spotify.com/v1/artists/${artistId}`, headers)\n        .then(res => res.json())\n        .then(artistData => this.setState({artistData}));\n\n      fetch(`https://api.spotify.com/v1/artists/${artistId}/top-tracks?country=us`, headers)\n        .then(res => res.json())\n        .then(topTenData => this.setState({topTenData}));\n\n      fetch(`https://api.spotify.com/v1/artists/${artistId}/related-artists`, headers)\n        .then(res => res.json())\n        .then(relatedArtistData => this.setState({relatedArtistData}));\n    }\n  }\n\n  componentDidMount() {\n    this.callSpotify(this.state.artistId)\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (this.state.artistId !== prevState.artistId){\n      this.callSpotify(this.state.artistId)\n    }\n  }\n\n  changeArtist = (e, artistId) => {\n    this.setState({artistId})\n  }\n\n  render() {\n    let { artistData, topTenData, relatedArtistData } = this.state\n    return (\n      <div className=\"App\">\n        {Object.keys(artistData).length === 0 || artistData.error ? <button className='GetToken'><a href={`https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=token`}>Generate Spotify Token</a></button> : null}\n        <br/>\n        {artistData.id ? <ArtistBlock artistData={artistData} relatedArtistData={relatedArtistData} changeArtist={this.changeArtist} topTenData={topTenData}/> : null}\n    </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}